<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sidebar</title>
  <link rel="stylesheet" href="/css/institute/sidebar.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon/fonts/remixicon.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"/>
</head>
<body>

  <!-- Sidebar -->
  <div class="sidebar">

    <!-- Top logo and institute info -->
    <div class="institute-info">
      <i class="fa-solid fa-pen edit-btn"></i>
      <img src="/assets/logo_in.jpg" alt="Institute Logo" class="institute-logo">
      <h2 class="institute-name">Indira College Of Commerce and Science Unity Campus Pune</h2>
      <p class="institute-desc">Institute of Advanced Learning and Research</p>
    </div>

    <!-- Menu items -->
    <nav class="menu">
      <a href="/schedule" data-page="schedule">><i class="ri-calendar-line"></i> Schedule</a>
      <a href="/lect-detail" data-page="/lect-detail">><i class="ri-user-3-line"></i> Lecturer Details</a>
      <a href="/stud_detail" data-page="/stud_detai">><i class="ri-graduation-cap-line"></i> Students Details</a>
      <a href="/analytics" data-page="/analytics">><i class="ri-bar-chart-2-line"></i> Analytics</a>
      <a href="/reward" data-page="/reward">><i class="ri-award-line"></i> Rewards</a>
    </nav>

    <!-- Logout -->
    <div class="logout">
      <a href="#"><i class="ri-logout-box-r-line"></i> Logout</a>
    </div>
  </div>

  <!-- <div class="main-content">
    Main content goes here
    <h1>Welcome to Dashboard</h1>
  </div> -->

  <script>
 // public/js/sidebar.js

document.addEventListener('DOMContentLoaded', () => {
  const links = Array.from(document.querySelectorAll('.menu a'));

  if (!links.length) return;

  // Normalize a pathname: remove query/hash, trim trailing slash and leading slash
  function normalizePath(pathname) {
    // remove query and hash
    let p = pathname.split('?')[0].split('#')[0];
    // ensure it's a string
    p = p == null ? '' : String(p);
    // remove trailing slash (but keep root "/")
    if (p.length > 1 && p.endsWith('/')) p = p.slice(0, -1);
    // remove leading slash for easier comparison
    if (p.startsWith('/')) p = p.slice(1);
    return p;
  }

  // Set active class based on a normalized key (either data-page or normalized pathname)
  function setActiveByKey(key) {
    links.forEach(link => {
      // derive a link key: prefer data-page if present, else use normalized href pathname
      const linkHrefPath = new URL(link.href, window.location.origin).pathname;
      const linkKey = link.dataset.page ? String(link.dataset.page) : normalizePath(linkHrefPath);
      if (linkKey === key) {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });
  }

  // 1) Try to activate based on the actual current URL path (most robust)
  const currentPathKey = normalizePath(window.location.pathname);

  // Determine which menu links correspond to valid pages and map their keys
  const validLinkKeys = links.map(link => {
    const linkHrefPath = new URL(link.href, window.location.origin).pathname;
    return link.dataset.page ? String(link.dataset.page) : normalizePath(linkHrefPath);
  });

  // If the URL path matches a link -> use it and persist
  if (validLinkKeys.includes(currentPathKey)) {
    setActiveByKey(currentPathKey);
    localStorage.setItem('activePage', currentPathKey);
  } else {
    // else try localStorage (persisted last-clicked)
    const saved = localStorage.getItem('activePage');
    const fallback = saved && validLinkKeys.includes(saved) ? saved : 'schedule';
    setActiveByKey(fallback);
    // Persist fallback if it wasn't present
    localStorage.setItem('activePage', fallback);
  }

  // 2) Click handling: prevent racing by saving state first, updating UI, then navigating
  links.forEach(link => {
    link.addEventListener('click', (e) => {
      // Only handle left-click without modifier keys
      if (e.button !== 0 || e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) return;

      e.preventDefault();

      const linkHrefPath = new URL(link.href, window.location.origin).pathname;
      const linkKey = link.dataset.page ? String(link.dataset.page) : normalizePath(linkHrefPath);

      // persist active page
      try {
        localStorage.setItem('activePage', linkKey);
      } catch (err) {
        // ignore localStorage errors (e.g. privacy mode) but continue
        console.warn('Could not write activePage to localStorage', err);
      }

      // update UI immediately
      setActiveByKey(linkKey);

      // then navigate
      window.location.href = link.href;
    });
  });
});

  </script>

</body>
</html>
